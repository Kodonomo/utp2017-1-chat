var fs = require('fs');
var log = require('tech').log;
var config = require('config');
var Session = require('./Session');

var path = __dirname + '/sessions.json';


exports.connect = function() {
    users = require('./sessions.json');
};

exports.getSession = function(ID) {
    return new Promise(function(resolve, reject) {
        fs.readFile(path, 'utf-8', function(err, db) {
            if (err) {
                log.error(err);
                reject(err);

            } else {
                db = JSON.parse(db);
                resolve(contain(db, ID));
            }
        });
    });
};

exports.addSession = function(login) { //may contain some another fields
    return new Promise(function(resolve, reject) {
        fs.readFile(path, 'utf-8', function(err, db) {
            if (err) {
                log.error(err);
                reject(err);

            } else {
                db = JSON.parse(db);

                var ID = IDExtra();
                var x = new Session(ID, login);
                db.Sessions.push(x);

                db = JSON.stringify(db, '', 4);

                fs.writeFile(path, db, 'utf-8', function(err) {
                    if (err) {
                        log.error(err);
                        reject(err);
                    }
                });

                resolve(x.sessionID);
            }
        });
    });
};

exports.deleteSession = function(ID) {
    return new Promise(function(resolve, reject) {
        fs.readFile(path, 'utf-8', function(err, db) {
            if (err) {
                log.error(err);
                reject(err);

            } else {
                db = JSON.parse(db);

                var r = contain(db, ID);

                if (!r) {
                    log.info("No such user");
                    reject("No such user");

                } else {
                    db.Sessions.splice(db.Sessions.indexOf(r), 1);
                    db = JSON.stringify(db, '', 4);

                    fs.writeFile(path, db, 'utf-8', function(err) {
                        if (err) {
                            log.error(err);
                            reject(err);
                        }
                    });

                    resolve(true);
                }
            }
        });
    });
};

function contain(db, ID) {
    var r;
    for (var i = 0; i < db.Sessions.length; i++)
        if (db.Sessions[i].sessionID == ID)
            r = db.Sessions[i];
    return r;
}

exports.deleteAllSessions = function() {
    var n = {
        Sessions: []
    };

    fs.writeFile(path, JSON.stringify(n, '', 4), 'utf-8', function(err) {
        if (err)
            throw new Error(err);
    });
};

/**
 * @return {string}
 */
function IDExtra() { //generate salt
    var str = "";
    for (var i = 0; i < config.SESSION_ID_LENGTH;) {
        var x = Math.floor(Math.random() * (123 - 48)) + 48;
        if (x <= 57 || (x >= 65 && x <= 90) || x >= 97) {
            str += String.fromCharCode(x);
            i++;
        }
    }
    return str;
}