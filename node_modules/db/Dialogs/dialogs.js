var fs = require('fs');
var log = require('tech').log;
var config = require('config');
var Message = require('./message');

var path = __dirname + '/dialogs.json';
var dialogs;

/*
Нужна ли вообще переменная dialogs??
 */

/*
exports.connect = function() {
    dialogs = require('./dialogs.json');
};
*/

exports.connect = function() {
    try {
        dialogs = JSON.parse(fs.readFileSync(path, 'utf-8'));
    } catch (err) {
        if (err.message.indexOf("ENOENT") == 0) {
            log.info("Файла с комнатами нет, но сейчас попробую создать!");
            fs.writeFileSync(path, JSON.stringify({}, '', 4), 'utf-8');
            log.info("Создано!");
        } else log.error(err);
        dialogs = {};
    }
};

exports.getMessages = function(room, start, isLastMessages) {
    return new Promise(function(resolve, reject) {
        log.debug("Получение истории сообщений чата для комнаты " + room);
        fs.readFile(path, 'utf-8', function(err, db) {
            if (err) {
                log.error(err);
                reject(err);

            } else {
                try {
                    db = JSON.parse(db);
                } catch (e) {
                    db = {};
                    log.info("В диалогах был кривой json! From getMessages");
                }
                var count = config.COUNT_OF_MESSAGES_TO_LOAD;

                if (db[room] instanceof Array && start >= 0 && start <= db[room].length) {
                    if (isLastMessages) resolve(db[room].slice(-count));
                    else resolve(db[room].slice(start, count))
                };
            }
        });
    });
};


exports.addRoom = function(room) {
    return new Promise(function(resolve, reject) {
        log.debug("Добавление комнаты " + room);
        fs.readFile(path, 'utf-8', function(err, db) {
            if (err) {
                log.error(err);
                return reject(err);
            }
            try {
                db = JSON.parse(db);
            } catch (e) {
                db = {};
                log.info("В диалогах был кривой json! From addRoom");
            }
            if ( db[room] instanceof Array) {
                log.info("Попытка добавить комнату, которая и так уже есть");
                return resolve(true); //нет причин писать обратно на диск то, что не изменилось
            }

            db[room] = config.MESSAGE_FIRST_IN_ROOM();

            db = JSON.stringify(db, '', 4);

            fs.writeFile(path, db, 'utf-8', function(err) {
                if (err) {
                    log.error(err);
                    reject(err);
                } else
                    resolve(true);
            });
        });
    });
};

exports.addMessage = function(room, sender, message, date) {
    return new Promise(function(resolve, reject) {
        log.debug("Добавление сообщения из комнаты " + room + " от пользователя " + sender);
        fs.readFile(path, 'utf-8', function(err, db) {
            if (err) {
                log.error(err);
                reject(err);

            } else {
                db = JSON.parse(db);

                if (!db[room]) {
                    log.info("Попытка добавить сообщение в несуществующую комнату!");
                    return resolve(true); //нечего писать на диск
                }
                db[room].push(new Message(sender, message, date));

                db = JSON.stringify(db, '', 4);

                fs.writeFile(path, db, 'utf-8', function(err) {
                    if (err) {
                        log.error(err);
                        reject(err);
                    } else
                        resolve(true);
                });
            }
        });
    });
};

exports.deleteRoom = function (room) {
    return new Promise(function(resolve, reject) {
        log.debug("Удаление комнаты " + room);
        fs.readFile(path, 'utf-8', function(err, db) {
            if (err) {
                log.error(err);
                reject(err);

            } else {
                db = JSON.parse(db);

                if (!db[room]) {
                    log.info("Попытка удалить несуществующую комнату!");
                    return resolve(true); //нет причин писать на диск то, что не изменилось
                }
                delete db[room];

                db = JSON.stringify(db, '', 4);

                fs.writeFile(path, db, 'utf-8', function(err) {
                    if (err) {
                        log.error(err);
                        reject(err);
                    } else
                        resolve(true);
                });
            }
        });
    });
};

exports.deleteAllRooms = function() {
    log.debug("Удаление комнат...");
    fs.writeFile(path, JSON.stringify({ }, '', 4), 'utf-8', function(err) {
        if (err)
            throw new Error(err);
    });

};