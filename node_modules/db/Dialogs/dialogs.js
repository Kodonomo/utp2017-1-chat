var fs = require('fs');
var log = require('tech').log;
var config = require('config');
var Message = require('./message');

var path = __dirname + '/dialogs.json';
var dialogs;


exports.connect = function() {
    dialogs = require('./dialogs.json');
};

exports.getMessages = function(room, start, count) {
    return new Promise(function(resolve, reject) {
        fs.readFile(path, 'utf-8', function(err, db) {
            if (err) {
                log.error(err);
                reject(err);

            } else {
                db = JSON.parse(db);

                if (db[room] && start < count && count < db[room].length) {
                    resolve(db[room].slice(start, count))
                }
            }
        });
    });
};

exports.addRoom = function(room) {
    return new Promise(function(resolve, reject) {
        fs.readFile(path, 'utf-8', function(err, db) {
            if (err) {
                log.error(err);
                reject(err);

            } else {
                db = JSON.parse(db);

                if (!db[room])
                    db[room] = [];

                db = JSON.stringify(db, '', 4);

                fs.writeFile(path, db, 'utf-8', function(err) {
                    if (err) {
                        log.error(err);
                        reject(err);
                    } else
                        resolve(true);
                });
            }
        });
    });
};

exports.addMessage = function(room, sender, message, date) {
    return new Promise(function(resolve, reject) {
        fs.readFile(path, 'utf-8', function(err, db) {
            if (err) {
                log.error(err);
                reject(err);

            } else {
                db = JSON.parse(db);

                if (db[room])
                    db[room].push(new Message(sender, message, date));

                db = JSON.stringify(db, '', 4);

                fs.writeFile(path, db, 'utf-8', function(err) {
                    if (err) {
                        log.error(err);
                        reject(err);
                    } else
                        resolve(true);
                });
            }
        });
    });
};

exports.deleteRoom = function (room) {
    return new Promise(function(resolve, reject) {
        fs.readFile(path, 'utf-8', function(err, db) {
            if (err) {
                log.error(err);
                reject(err);

            } else {
                db = JSON.parse(db);

                if (db[room])
                    delete db[room];

                db = JSON.stringify(db, '', 4);

                fs.writeFile(path, db, 'utf-8', function(err) {
                    if (err) {
                        log.error(err);
                        reject(err);
                    } else
                        resolve(true);
                });
            }
        });
    });
};

exports.deleteAllRooms = function() {
    var n = { "0": [] };

    fs.writeFile(path, JSON.stringify(n, '', 4), 'utf-8', function(err) {
        if (err)
            throw new Error(err);
    });
};